{{- /* Determine Backup is REST or GraphQL */}}
{{- define "backup_api_type" -}}
{{- $apiType := "graphql" -}}
{{- $safeVersion := include "dgraph.version" . -}}
{{- if semverCompare "< 20.03" $safeVersion -}}
  {{- $apiType = "rest" -}}
{{- end -}}
{{- printf "%s" $apiType -}}
{{- end -}}
{{- if eq .Values.backups.full.enabled true -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "dgraph.backups.fullname" . }}-full
  labels:
    app: {{ template "dgraph.name" . }}
    chart: {{ template "dgraph.chart" . }}
    component: {{ .Values.alpha.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  schedule: "{{ .Values.backups.full.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: {{ template "dgraph.backups.fullname" . }}-full
            image: {{ template "backup.image" . }}
            imagePullPolicy: {{ .Values.backups.image.pullPolicy | quote }}
            command:
             - /usr/bin/bash
             - "-c"
             - |
                set -e
                {{- if .Values.backups.full.debug }}
                set -x
                {{- end }}

                source /scripts/backup.sh

                ## Use Single Alpha in Cluster to avoid potential issues with concurrent backups
                ## ref https://discuss.dgraph.io/t/concurrent-backups-can-lead-to-issues/9934/2
                ALPHA_HOST={{ template "dgraph.alpha.fullname" . }}-0.{{ template "dgraph.alpha.fullname" . }}-headless.${POD_NAMESPACE}.svc

                BACKUP_DESTINATION={{ .Values.backups.full.destination }}
                API_TYPE={{ template "backup_api_type" . }}
                MINIO_SECURE={{ .Values.backups.full.minioSecure }}

                ## Perform Backup
                {{- if .Values.alpha.acl.enabled }}
                TOKEN=$(get_token {{ .Values.backups.admin.user }} $(cat /backup_secrets/backup_admin_password ))
                FORCE_FULL=true backup $TOKEN
                {{- else }}
                FORCE_FULL=true backup
                {{- end }}
            volumeMounts:
            - name: backup-config-volume
              mountPath: /scripts
            {{- if .Values.alpha.tls.enabled }}
            - name: tls-volume
              mountPath: /dgraph/tls
            {{- end }}
            {{- if .Values.alpha.acl.enabled }}
            - name: backup-secret-volume
              mountPath: /backup_secrets
            {{- end }}
            env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.alpha.tls.enabled }}
            - name: CACERT_PATH
              value: /dgraph/tls/ca.crt
            {{- if .Values.backups.admin.tls_user }}
            - name: CLIENT_CERT_PATH
              value: /dgraph/tls/client.{{ .Values.backups.admin.tls_user }}.crt
            - name: CLIENT_KEY_PATH
              value: /dgraph/tls/client.{{ .Values.backups.admin.tls_user }}.key
            {{- end }}
            {{- end }}
          restartPolicy: OnFailure
          volumes:
          - name: backup-config-volume
            configMap:
              name: {{ template "dgraph.backups.fullname" . }}-config
          {{- if .Values.alpha.tls.enabled }}
          - name: tls-volume
            secret:
              secretName: {{ template "dgraph.alpha.fullname" . }}-secret
          {{- end }}
          {{- if .Values.alpha.acl.enabled }}
          - name: backup-secret-volume
            secret:
              secretName: {{ template "dgraph.backups.fullname" . }}-secret
          {{- end }}
{{- end }}
