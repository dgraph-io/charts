{{- /* Generate TLS Command Line Options */}}
{{ define "tls_options" }}
  {{- /* Default `--tls_dir /tls` if not set */}}
  {{- if .Values.alpha.tls.config.dir -}}
      {{- printf "--tls_dir %s " .Values.alpha.tls.config.dir -}}
  {{- else -}}
      {{- printf "--tls_dir /tls " -}}
  {{- end -}}
  {{- /* Default `--tls_client_auth VERIFYIFGIVEN` if not valid setting  */}}
  {{- $validTlsClientAuth := list "REQUEST" "REQUIREANY" "VERIFYIFGIVEN" "REQUIREANDVERIFY" -}}
  {{- if has .Values.alpha.tls.config.client_auth $validTlsClientAuth -}}
      {{- printf "--tls_client_auth %s " .Values.alpha.tls.config.client_auth -}}
  {{- else -}}
      {{- printf "--tls_client_auth VERIFYIFGIVEN " -}}
  {{- end -}}
  {{- /* Add `--tls_use_system_ca` if enabled */}}
  {{- if .Values.alpha.tls.config.use_system_ca -}}
      {{- printf "--tls_use_system_ca " -}}
  {{- end -}}
{{- end }}
{{- /* Generate comma-separated list of Zeros */}}
{{- define "multi_zeros" -}}
  {{- $zeroFullName := include "dgraph.zero.fullname" . -}}
  {{- $max := int .Values.zero.replicaCount -}}
  {{- /* Create semverCompare() safe version if 'master' or 'latest' */ -}}
  {{- $safeVersion := .Values.image.tag -}}
  {{- if or (eq $safeVersion "latest") (eq $safeVersion "master") -}}
    {{- $safeVersion = "v50.0.0" -}}
  {{- end -}}
  {{- /* Reset $max to 1 if multiple zeros not supported by dgraph version */}}
  {{- if semverCompare "< 1.2.3 || 20.03.0" $safeVersion -}}
     {{- $max = 1 -}}
  {{- end -}}
  {{- /* Create comma-separated list of zeros */}}
  {{- range $idx := until $max }}
    {{- printf "%s-%d.%s-headless.${POD_NAMESPACE}.svc.cluster.local:5080" $zeroFullName $idx $zeroFullName -}}
    {{- if ne $idx (sub $max 1) -}}
      {{- print "," -}}
    {{- end -}}
  {{ end }}
{{- end -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "dgraph.alpha.fullname" . }}
  labels:
    app: {{ template "dgraph.name" . }}
    chart: {{ template "dgraph.chart" . }}
    component: {{ .Values.alpha.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "dgraph.alpha.fullname" . }}-headless
  replicas: {{ .Values.alpha.replicaCount }}
  podManagementPolicy: {{ .Values.alpha.podManagementPolicy | quote }}
  updateStrategy:
    type: {{ .Values.alpha.updateStrategy | quote }}
    {{- if (eq "Recreate" .Values.alpha.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.alpha.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.alpha.rollingUpdatePartition }}
    {{- end }}
  selector:
    matchLabels:
      app: {{ template "dgraph.name" . }}
      chart: {{ template "dgraph.chart" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.alpha.name }}
  template:
    metadata:
      name: {{ template "dgraph.alpha.fullname" . }}
      {{- if .Values.alpha.metrics.enabled }}
      annotations:
        prometheus.io/path: /debug/prometheus_metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        app: {{ template "dgraph.name" . }}
        chart: {{ template "dgraph.chart" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.alpha.name }}
    spec:
      {{- if or (eq .Values.alpha.antiAffinity "hard") (eq .Values.alpha.antiAffinity "soft") .Values.alpha.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.alpha.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - {{ .Values.alpha.name }}
            topologyKey: {{ .Values.alpha.podAntiAffinitytopologyKey }}
      {{- else if eq .Values.alpha.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - {{ .Values.alpha.name }}
              topologyKey: {{ .Values.alpha.podAntiAffinitytopologyKey }}
      {{- end }}
      {{- with .Values.alpha.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
      {{- end }}
{{- include "dgraph.imagePullSecrets" . | indent 6 }}
      {{- if .Values.alpha.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.alpha.securityContext.fsGroup }}
        runAsUser: {{ .Values.alpha.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.alpha.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.alpha.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.alpha.tolerations }}
      tolerations:
{{ toYaml .Values.alpha.tolerations | indent 8 }}
      {{- end }}
      containers:
      - name: {{ template "dgraph.alpha.fullname" . }}
        image: {{ template "dgraph.image" . }}
        ports:
        - containerPort: 7080
          name: grpc-alpha-int
        - containerPort: 8080
          name: http-alpha
        - containerPort: 9080
          name: grpc-alpha
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          {{- if .Values.alpha.tls.enabled }}
          - name: TLS_OPTIONS
            value: {{ template "tls_options" . }}
          {{- end }}
        {{- with .Values.alpha.extraEnvs }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
         - bash
         - "-c"
         - |
            set -ex
            dgraph alpha ${TLS_OPTIONS} --my=$(hostname -f):7080 --lru_mb {{ .Values.alpha.lru_mb }} --zero {{ template "multi_zeros" . }}
        resources:
{{ toYaml .Values.alpha.resources | indent 10 }}
        {{- if .Values.alpha.startupProbe.enabled }}
        startupProbe:
          httpGet:
            port: {{ .Values.alpha.startupProbe.port }}
            path: {{ .Values.alpha.startupProbe.path }}
          periodSeconds: {{ .Values.alpha.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.alpha.startupProbe.timeoutSeconds }}
          successThreshold: {{ .Values.alpha.startupProbe.successThreshold }}
          failureThreshold: {{ .Values.alpha.startupProbe.failureThreshold }}
        {{- else if .Values.alpha.customStartupProbe }}
        startupProbe: {{- toYaml .Values.alpha.customStartupProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.alpha.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            port: {{ .Values.alpha.livenessProbe.port }}
            path: {{ .Values.alpha.livenessProbe.path }}
          initialDelaySeconds: {{ .Values.alpha.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.alpha.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.alpha.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.alpha.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.alpha.livenessProbe.failureThreshold }}
        {{- else if .Values.alpha.customLivenessProbe }}
        livenessProbe: {{- toYaml .Values.alpha.customLivenessProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.alpha.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            port: {{ .Values.alpha.readinessProbe.port }}
            path: {{ .Values.alpha.readinessProbe.path }}
          initialDelaySeconds: {{ .Values.alpha.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.alpha.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.alpha.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.alpha.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.alpha.readinessProbe.failureThreshold }}
        {{- else if .Values.alpha.customReadinessProbe }}
        readinessProbe: {{- toYaml .Values.alpha.customReadinessProbe | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.alpha.persistence.enabled }}
        - name: datadir
          mountPath: /dgraph
        {{- end }}
        {{- if .Values.alpha.tls.enabled }}
        - name: tls-volume
          mountPath: {{ .Values.alpha.tls.config.dir | default "/tls" }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.alpha.terminationGracePeriodSeconds }}
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
      {{- if .Values.alpha.tls.enabled }}
      - name: tls-volume
        secret:
          secretName: {{ template "dgraph.alpha.fullname" . }}-secret
      {{- end }}

{{- if .Values.alpha.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        accessModes:
        {{- range .Values.alpha.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.alpha.persistence.size | quote }}
      {{- if .Values.alpha.persistence.storageClass }}
      {{- if (eq "-" .Values.alpha.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: {{ .Values.alpha.persistence.storageClass | quote }}
      {{- end -}}
      {{- end -}}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}
